{"ast":null,"code":"const updateCartItems = (cartItems, item, idx) => {\n  if (item.count === 0) {\n    return [...cartItems.slice(0, idx), ...cartItems.slice(idx + 1)];\n  }\n\n  if (idx === -1) {\n    return [...cartItems, item];\n  }\n\n  ;\n  return [...cartItems.slice(0, idx), item, ...cartItems.slice(idx + 1)];\n};\n\nconst updateCartItem = (book, item = {}, quantity) => {\n  const {\n    id = book.id,\n    count = 0,\n    title = book.title,\n    total = 0\n  } = item;\n  return {\n    id,\n    title,\n    count: count + quantity,\n    total: total + quantity * book.price\n  };\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n  const {\n    bookList: {\n      books\n    },\n    shoppingCart: {\n      cartItems\n    }\n  } = state;\n  const book = books.find(({\n    id\n  }) => id === bookId);\n  const itemIndex = cartItems.findIndex(({\n    id\n  }) => id === bookId);\n  const item = cartItems[itemIndex];\n  const newItem = updateCartItem(book, item, quantity);\n  return {\n    orderTotal: 0,\n    cartItems: updateCartItems(cartItems, newItem, itemIndex)\n  };\n};\n\nconst updateBookList = (state, action) => {\n  if (state === undefined) {\n    return {\n      books: [],\n      loading: true,\n      error: null\n    };\n  }\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUESTED':\n      return {\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state.bookList;\n  }\n};\n\nconst updateShoppingCart = (state, action) => {\n  if (state === undefined) {\n    return {\n      cartItems: [],\n      orderTotal: 0\n    };\n  }\n\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART':\n      return updateOrder(state, action.payload, 1);\n\n    case 'BOOK_REMOVED_FROM_CART':\n      return updateOrder(state, action.payload, -1);\n\n    case 'ALL_BOOKS_REMOVED_FROM_CART':\n      const item = state.shoppingCart.cartItems.find(({\n        id\n      }) => id === action.payload);\n      return updateOrder(state, action.payload, -item.count);\n\n    default:\n      return state.shoppingCart;\n  }\n};\n\nconst reducer = (state, action) => {\n  return {\n    bookList: updateBookList(state, action),\n    shoppingCart: updateShoppingCart(state, action)\n  };\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/p.i.t.e.p/Desktop/todol/redux-project/redux-project/src/reducers/index.js"],"names":["updateCartItems","cartItems","item","idx","count","slice","updateCartItem","book","quantity","id","title","total","price","updateOrder","state","bookId","bookList","books","shoppingCart","find","itemIndex","findIndex","newItem","orderTotal","updateBookList","action","undefined","loading","error","type","payload","updateShoppingCart","reducer"],"mappings":"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","sourcesContent":["\n\nconst updateCartItems = (cartItems, item, idx) => {\n\n    if(item.count === 0) {\n        return [\n            ...cartItems.slice(0, idx),\n            ...cartItems.slice(idx + 1)\n        ];\n    }\n\n    if (idx === -1) {\n        return [\n            ...cartItems,\n            item\n        ];\n    };\n\n    return [\n        ...cartItems.slice(0, idx),\n        item,\n        ...cartItems.slice(idx + 1)\n    ];\n}\n\nconst updateCartItem = (book, item = {}, quantity) => {\n\n    const { \n        id = book.id, \n        count = 0, \n        title = book.title, \n        total = 0 \n    } = item;\n\n    return {\n        id,\n        title,\n        count: count + quantity,\n        total: total + quantity*book.price\n\n    }\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n\n    const { bookList: { books }, shoppingCart: { cartItems }} = state;\n    const book = books.find(({id}) => id === bookId);\n\n    const itemIndex = cartItems.findIndex(({\n        id\n    }) => id === bookId);\n    const item = cartItems[itemIndex];\n\n    const newItem = updateCartItem(book, item, quantity);\n    return {\n        orderTotal: 0,\n        cartItems: updateCartItems(cartItems, newItem, itemIndex)\n    };\n}\n\nconst updateBookList = (state, action) => {\n\n    if(state ===  undefined) {\n        return {\n            books: [],\n            loading: true,\n            error: null,\n        }\n    }\n  \n    switch(action.type) {\n        case 'FETCH_BOOKS_REQUESTED':\n            return {\n                books: [],\n                    loading: true,\n                    error: null\n            };\n        case 'FETCH_BOOKS_SUCCESS':\n            return {\n                books: action.payload,\n                    loading: false,\n                    error: null\n            };\n\n        case 'FETCH_BOOKS_FAILURE':\n            return {\n                books: [],\n                    loading: false,\n                    error: action.payload\n            };\n\n        default:\n            return state.bookList;\n    }\n};\nconst updateShoppingCart = (state, action) => {\n\n    if(state ===  undefined) {\n        return {\n            cartItems: [],\n            orderTotal: 0\n        }\n    }\n\n    switch(action.type) {\n        \n        case 'BOOK_ADDED_TO_CART':\n            return updateOrder(state, action.payload, 1);\n\n        case 'BOOK_REMOVED_FROM_CART':\n            return updateOrder(state, action.payload, -1);\n\n        case 'ALL_BOOKS_REMOVED_FROM_CART':\n            const item = state.shoppingCart.cartItems.find(({id}) => id === action.payload);\n            return updateOrder(state, action.payload, -item.count);\n\n        default:\n            return state.shoppingCart;\n\n    }\n}\n\nconst reducer = (state, action) => {\n\n    return{\n        bookList: updateBookList(state, action),\n        shoppingCart: updateShoppingCart(state, action)\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}