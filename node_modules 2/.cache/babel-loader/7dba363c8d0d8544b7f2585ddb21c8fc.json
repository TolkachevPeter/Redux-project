{"ast":null,"code":"import { bool } from \"prop-types\";\nconst initialState = {\n  bookList: {\n    books: [],\n    loading: true,\n    error: null\n  },\n  shoppingCart: {\n    cartItems: [],\n    orderTotal: 0\n  }\n};\n\nconst updateCartItems = (cartItems, item, idx) => {\n  if (item.count === 0) {\n    return [...cartItems.slice(0, idx), ...cartItems.slice(idx + 1)];\n  }\n\n  if (idx === -1) {\n    return [...cartItems, item];\n  }\n\n  ;\n  return [...cartItems.slice(0, idx), item, ...cartItems.slice(idx + 1)];\n};\n\nconst updateCartItem = (book, item = {}, quantity) => {\n  const {\n    id = book.id,\n    count = 0,\n    title = book.title,\n    total = 0\n  } = item;\n  return {\n    id,\n    title,\n    count: count + quantity,\n    total: total + quantity * book.price\n  };\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n  const {\n    bookList: {\n      books\n    },\n    shoppingCart: {\n      cartItems\n    }\n  } = state;\n  const book = books.find(({\n    id\n  }) => id === bookId);\n  const itemIndex = cartItems.findIndex(({\n    id\n  }) => id === bookId);\n  const item = cartItems[itemIndex];\n  const newItem = updateCartItem(book, item, quantity);\n  return {\n    orderTotal: 0,\n    cartItems: updateCartItems(cartItems, newItem, itemIndex)\n  };\n};\n\nconst updateBookList = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUESTED':\n      return {\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state.bookList;\n  }\n};\n\nconst updateShoppingCart = (state, action) => {\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART':\n      return updateOrder(state, action.payload, 1);\n\n    case 'BOOK_REMOVED_FROM_CART':\n      return updateOrder(state, action.payload, -1);\n\n    case 'ALL_BOOKS_REMOVED_FROM_CART':\n      const item = state.shoppingCart.cartItems.find(({\n        id\n      }) => id === action.payload);\n      return updateOrder(state, action.payload, -item.count);\n\n    default:\n      return state.shoppingCart;\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUESTED':\n    case 'FETCH_BOOKS_SUCCESS':\n    case 'FETCH_BOOKS_FAILURE':\n      return { ...state,\n        bookList: updateBookList(state, action)\n      };\n\n    case 'BOOK_ADDED_TO_CART':\n    case 'BOOK_REMOVED_FROM_CART':\n    case 'ALL_BOOKS_REMOVED_FROM_CART':\n      return { ...state,\n        shoppingCart: updateShoppingCart(state, action)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/p.i.t.e.p/Desktop/todol/redux-project/redux-project/src/reducers/index.js"],"names":["bool","initialState","bookList","books","loading","error","shoppingCart","cartItems","orderTotal","updateCartItems","item","idx","count","slice","updateCartItem","book","quantity","id","title","total","price","updateOrder","state","bookId","find","itemIndex","findIndex","newItem","updateBookList","action","type","payload","updateShoppingCart","reducer"],"mappings":"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","sourcesContent":["import {\n    bool\n} from \"prop-types\";\n\nconst initialState = {\n    bookList: {\n        books: [],\n        loading: true,\n        error: null,\n    },\n\n    shoppingCart: {\n        cartItems: [],\n        orderTotal: 0\n    }\n};\n\nconst updateCartItems = (cartItems, item, idx) => {\n\n    if(item.count === 0) {\n        return [\n            ...cartItems.slice(0, idx),\n            ...cartItems.slice(idx + 1)\n        ];\n    }\n\n    if (idx === -1) {\n        return [\n            ...cartItems,\n            item\n        ];\n    };\n\n    return [\n        ...cartItems.slice(0, idx),\n        item,\n        ...cartItems.slice(idx + 1)\n    ];\n}\n\nconst updateCartItem = (book, item = {}, quantity) => {\n\n    const { \n        id = book.id, \n        count = 0, \n        title = book.title, \n        total = 0 \n    } = item;\n\n    return {\n        id,\n        title,\n        count: count + quantity,\n        total: total + quantity*book.price\n\n    }\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n\n    const { bookList: { books }, shoppingCart: { cartItems }} = state;\n    const book = books.find(({id}) => id === bookId);\n\n    const itemIndex = cartItems.findIndex(({\n        id\n    }) => id === bookId);\n    const item = cartItems[itemIndex];\n\n    const newItem = updateCartItem(book, item, quantity);\n    return {\n        orderTotal: 0,\n        cartItems: updateCartItems(cartItems, newItem, itemIndex)\n    };\n}\n\nconst updateBookList = (state, action) => {\n  \n    switch(action.type) {\n        case 'FETCH_BOOKS_REQUESTED':\n            return {\n                books: [],\n                    loading: true,\n                    error: null\n            };\n        case 'FETCH_BOOKS_SUCCESS':\n            return {\n                books: action.payload,\n                    loading: false,\n                    error: null\n            };\n\n        case 'FETCH_BOOKS_FAILURE':\n            return {\n                books: [],\n                    loading: false,\n                    error: action.payload\n            };\n\n        default:\n            return state.bookList;\n    }\n};\nconst updateShoppingCart = (state, action) => {\n\n    switch(action.type) {\n        \n        case 'BOOK_ADDED_TO_CART':\n            return updateOrder(state, action.payload, 1);\n\n        case 'BOOK_REMOVED_FROM_CART':\n            return updateOrder(state, action.payload, -1);\n\n        case 'ALL_BOOKS_REMOVED_FROM_CART':\n            const item = state.shoppingCart.cartItems.find(({id}) => id === action.payload);\n            return updateOrder(state, action.payload, -item.count);\n\n        default:\n            return state.shoppingCart;\n\n    }\n}\n\nconst reducer = (state = initialState, action) => {\n\n\n    switch (action.type) {\n        case 'FETCH_BOOKS_REQUESTED':\n        case 'FETCH_BOOKS_SUCCESS':\n        case 'FETCH_BOOKS_FAILURE':\n            return {\n                ...state,\n                bookList: updateBookList(state, action)\n            };\n        \n        case 'BOOK_ADDED_TO_CART':\n        case 'BOOK_REMOVED_FROM_CART':\n        case 'ALL_BOOKS_REMOVED_FROM_CART':\n            return {\n                ...state,\n                shoppingCart: updateShoppingCart(state, action)\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}